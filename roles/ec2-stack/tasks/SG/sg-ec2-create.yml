---
- block:
  - name: Create Security Group for EC2
    ec2_group:
      name: "{{ ec2_security_group_name }}"
      description: "{{ ec2_security_group_name }}"
      region: "{{ region }}"
      vpc_id: "{{ vpc_id }}"
      purge_rules: "{{ ec2_replace_existing_rules_ingress }}"
      purge_rules_egress: "{{ ec2_replace_existing_rules_egress }}"
    environment: "{{ environment_vars }}"
    register: ec2_security_group
    until: 'ec2_security_group.group_id != ""'
    retries: 5
    delay: 30

##
##  Display the resulting EC2 Security Group
##

  - set_fact:
      ec2_security_group_id: "{{ ec2_security_group.group_id }}"
  - debug:
      msg: "The security group for EC2 is {{ ec2_security_group_id }}"

##
##  Use the user-defined security group rules if the elb's security group id is not available
##

  - set_fact:
      ec2_rules: "{{ ec2_sg_user_defined_rules | default([]) }}"

##
##  Apply the combined rules to the EC2 Security Group
##  Ignore duplicates
##
  - name: Add Rules to EC2 Security Group
    command: >
      aws ec2 authorize-security-group-ingress
      --region {{ region }}
      --group-id  {{ ec2_security_group_id }}
      --protocol {{ item.proto }}
      --port {{ item.port }}
      {% if item.cidr_ip is defined and item.cidr_ip != '' %}
      --cidr {{ item.cidr_ip }}
      {% else %}
      --source-group {{ item.source_sg }}
      --{% endif %}
    with_items:
    - "{{ ec2_rules }}"
    register: ec2_sg_op
    environment: "{{ environment_vars }}"
    when: 'ec2_rules is defined and ec2_rules|length !=0'
    failed_when: "ec2_sg_op.stderr !='' and '(InvalidPermission.Duplicate)' not in ec2_sg_op.stderr"

...

